#include "StateMachineLib.h"
#include "AsyncTaskLib.h"
#include "Keypad.h"
#include "LiquidCrystal.h"
#include "DHT.h"

#define LED_ROJO 46
#define LED_VERDE 48
#define LED_AZUL 50
#define DHTPIN 22 
#define DHTTYPE DHT11 
#define RELE_VENTILADOR A7


void Inicio();
void Monitoreo();
void Timeout();
void sonidoAlarma();
void prenderLedAlarma();
void apagarLedAlarma();
void apagarSonidoAlarma();
// change this to make the song slower or faster
int buzzer = 7;


const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

int sensorPin = A0;   
int sensorValue = 0; 
float h = 0;
float t = 0;
int intentosAlarma = 0;


// Keypad setup
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3', 'A'},
  {'4','5','6', 'B'},
  {'7','8','9', 'C'},
  {'*','0','#', 'D'}
};
byte rowPins[ROWS] = {30, 32, 34, 36};
byte colPins[COLS] = {38, 40, 42, 44};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Password
char contrasenia[9] = "1234ABCD";

int i = 0;
int intentos = 0;
DHT dht(DHTPIN, DHTTYPE);
int bandera = 0;
int flag=1;

// State Alias
enum State
{
  
  MonitoreoAmbiental = 0,
  Alarma = 1,
  Init = 2,
  ComfortTermicoAlto = 3,
  ComfortTermicoBajo = 4,
  Bloqueado = 5,

};

// Input Alias
enum Input
{
  TIMEOUT = 0,
  LUZ = 1,
  TEMP = 2,
  PMVA = 3,
  PMVB = 4,
  SISTEMABLOQUEADO=5,
  INTENTOSALARMA= 6,
  TECLA = 7, 
  CLAVECORRECTA = 8,
  Unknown=9,
};


StateMachine stateMachine(6, 13);


Input input;


void setupStateMachine()
{
  // Add transitions
  stateMachine.AddTransition(Init, MonitoreoAmbiental, []() { return input == CLAVECORRECTA; });
  stateMachine.AddTransition(Init, Bloqueado, []() { return input == SISTEMABLOQUEADO; });

  stateMachine.AddTransition(MonitoreoAmbiental, Alarma, []() { return input == TEMP; });
  stateMachine.AddTransition(MonitoreoAmbiental, Alarma, []() { return input == LUZ; });

  stateMachine.AddTransition(MonitoreoAmbiental, ComfortTermicoAlto, []() { return input == PMVA; });
  stateMachine.AddTransition(MonitoreoAmbiental, ComfortTermicoBajo, []() { return input == PMVB; });
  
  stateMachine.AddTransition(ComfortTermicoAlto, MonitoreoAmbiental, []() { return input == TIMEOUT; });
  stateMachine.AddTransition(ComfortTermicoBajo, MonitoreoAmbiental, []() { return input == TIMEOUT; });

  stateMachine.AddTransition(Alarma, Bloqueado, []() { return input == INTENTOSALARMA; });
  stateMachine.AddTransition(Alarma, MonitoreoAmbiental, []() { return input == TIMEOUT; });

  stateMachine.AddTransition(Bloqueado, Init, []() { return input == TECLA; });

  // Add actions
  stateMachine.SetOnEntering(Init, I);
  stateMachine.SetOnEntering(MonitoreoAmbiental, M);
  stateMachine.SetOnEntering(Alarma, AlarmaP);
  stateMachine.SetOnEntering(Bloqueado, Bloqueo);
  stateMachine.SetOnEntering(ComfortTermicoAlto, ComfortTermicoAltoP);
  stateMachine.SetOnEntering(ComfortTermicoBajo, ComfortTermicoBajoP);

}

void setup() 
{
  lcd.begin(16, 2);
  Serial.begin(9600);
  pinMode(RELE_VENTILADOR, OUTPUT);

  Serial.println("Bienvenido");
  setupStateMachine();  
  Serial.println("maquina encendida");

  // Initial state
  stateMachine.SetState(Init, false, true);
  dht.begin();
}

AsyncTask inicio(0,false,Inicio);
AsyncTask monitoreo(3000,false,Monitoreo);
AsyncTask timeout(0,false,Timeout);
AsyncTask alarma(0,false,AlarmaP);
AsyncTask ledTask(800,true,prenderLedAlarma);
AsyncTask offLedTask(200,false,apagarLedAlarma);
AsyncTask sonidoTask(800,true,sonidoAlarma);
AsyncTask apagarSonidoTask(200,apagarSonidoAlarma);



void loop() 
{
  
  inicio.Update();
  monitoreo.Update();
  timeout.Update();
  ledTask.Update();
  offLedTask.Update();
  sonidoTask.Update();
  apagarSonidoTask.Update();
  stateMachine.Update();
  
  
}

void Inicio()
{
  noTone(buzzer);
  intentos=0;
  intentosAlarma = 0;
  char ingreso[9];
  i=0;
  lcd.clear();
  lcd.print("Digite su contra");
  pinMode (LED_VERDE, OUTPUT);
  pinMode (LED_AZUL, OUTPUT);
  pinMode (LED_ROJO, OUTPUT);
  digitalWrite(LED_VERDE, LOW);
  digitalWrite(LED_AZUL, LOW);
  digitalWrite(LED_ROJO, LOW);
  
  while(true){

    char key = keypad.getKey();
    if (key && i < 8) {
      ingreso[i] = key;
      lcd.setCursor(i, 1);
      lcd.print('*');
      i++;
    }

    if (i == 8) {
      ingreso[8] = '\0'; // aseguramos el fin de cadena
      if (strcmp(contrasenia, ingreso) == 0) {
        lcd.clear();
        lcd.print("Clave Correcta");
        digitalWrite(LED_VERDE, HIGH);
        digitalWrite(LED_AZUL, LOW);
        digitalWrite(LED_ROJO, LOW);
        input = Input::CLAVECORRECTA;
        break;
      } else {
        lcd.clear();
        lcd.print("Clave Incorrecta");
        digitalWrite(LED_VERDE, LOW);
        digitalWrite(LED_AZUL, HIGH);
        digitalWrite(LED_ROJO, LOW);
        intentos++;
        delay(2000);
        lcd.clear();
        lcd.print("Digite su contra");
      }

      i = 0;
      memset(ingreso, 0, sizeof(ingreso));
    }

    if (intentos >= 3) {
      lcd.clear();
      lcd.print("Sistema bloqueado");
      digitalWrite(LED_VERDE, LOW);
      digitalWrite(LED_AZUL, LOW);
      digitalWrite(LED_ROJO, HIGH);
      input = Input::SISTEMABLOQUEADO;
      break;
    }
  }
}
// Auxiliar output functions that show the state debug
void Monitoreo()
{
  
  Serial.println("entrando a monitoreo");
  int l;
  int h;
  int t;
  while(true)
  {
    delay(1000);
    l = analogRead(A0);
    h = dht.readHumidity();
    t = dht.readTemperature();
    Serial.println(h);
    Serial.println(t);
    Serial.println(l);
    lcd.clear();
    lcd.print("L:");
    lcd.print(l);
    lcd.print(" ");
    lcd.print("H:");
    lcd.print(h);
    lcd.print(" ");
    lcd.print("T:");
    lcd.print(t);
    if(l>10 || t>40)
    {
      break;
    }
  }
  input = Input::LUZ;
    
  return;

}

void AlarmaP()
{
  
  intentosAlarma++;
  Serial.println("entrando a alarma");
  Serial.println(intentosAlarma);
  ledTask.Start();
  sonidoTask.Start();

  if(intentosAlarma >= 3)
  {
    apagarLedAlarma();
    
    noTone(buzzer);
    input = Input::INTENTOSALARMA;
    return;

  };

  timeout.Start();

  

}


void Bloqueo()
{
  Serial.println(" Sistema bloqueado ");
  
  digitalWrite(RELE_VENTILADOR,HIGH);
  while(true)
  {
    lcd.clear();
    char K = keypad.getKey();
    lcd.print(K);
    if(K == '*')
    {

      input = Input::TECLA;
      break;

    };
  }
}
void ComfortTermicoAltoP()
{
  Serial.println(" Comfort Termico Alto enfriando motores ");
}
void ComfortTermicoBajoP()
{
  Serial.println(" Comfort Termico Bajo calentando motores ");
}


void M()
{

  monitoreo.Start();

}
void I()
{

  inicio.Start();

}
void prenderLedAlarma()
{

  digitalWrite(LED_AZUL, HIGH);
  offLedTask.Start();

}
void apagarLedAlarma()
{
  digitalWrite(LED_AZUL, LOW);

}

void sonidoAlarma()
{

  tone(buzzer,800);
  apagarSonidoTask.Start();

}
void apagarSonidoAlarma()
{
  noTone(buzzer);
}
void Timeout()
{
  apagarLedAlarma();
  input= Input::TIMEOUT;
}
